<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wlecome to Wang Chao&#39;s blog</title>
    <link>https://netwchao.github.io/</link>
    <description>Recent content on Wlecome to Wang Chao&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2019, Weru and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sun, 25 Aug 2019 00:52:59 +0300</lastBuildDate>
    
	<atom:link href="https://netwchao.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>服务器集群使用方法</title>
      <link>https://netwchao.github.io/post/creating-a-new-theme/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://netwchao.github.io/post/creating-a-new-theme/</guid>
      <description>集群使用方法 1 2 3 4 5 6 7 8 9 10  作业控制 作业监测 qsub：提交作业 qstat：显示作业 qdel：取消作业 showq： 查看所有作业 qsig：给作业发送信号 pestat：各节点使用情况 pbsnodes：列出集群中所有节点的状态和属性 qhold：挂起作业 qrls：释放挂起的作业 qrerun：重新运行作业 qmove：将作业移动到另一个队列 qalter： 更改作业资源属性   PBS命令大全 1、qalter 更改作业属性 语法：qalter [-a date_time] [-A account_string] [-e path] [-h hold_list] [-j join] [-k keep] [-l resource_list] [-m mail_options] [-M user_list] [-N name] [-o path] [-p priority] [-r c] [-u user_list] job_identifier&amp;hellip;
举例：1. 更改批处理作业的运行时间属性。
 $ qalter -a 0309251000 23.</description>
    </item>
    
    <item>
      <title>Blog building</title>
      <link>https://netwchao.github.io/post/emoji-support/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://netwchao.github.io/post/emoji-support/</guid>
      <description>Website construction During the master&amp;rsquo;s study, when facing various difficulties in finding various learning materials, I can always break into the blogs of some professional bigwigs. The blog posts are rich in content and the web pages are cool. I would like to thank them for providing them for my study. help. Is also influenced by the big brothers,I also have the idea of building a blog. After all, I have to keep up with the big guys and find a platform for publicity.</description>
    </item>
    
    <item>
      <title>Blogger&#39;s Profile</title>
      <link>https://netwchao.github.io/about/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://netwchao.github.io/about/</guid>
      <description>The blogger is currently a PhD student, and his main research direction is bioinformatics.
 BACKGROUND
 Huazhong Agricultural University-Shenzhen Institute of Genomics, Co-cultivation PhD student Huazhong Agricultural University，Animal genetic breeding and reproduction，Master of Agriculture Hunan Agricultural University，Animal Science，Bachelor of Agriculture   GitHub详情.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://netwchao.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://netwchao.github.io/post/goisforlovers/</guid>
      <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://netwchao.github.io/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://netwchao.github.io/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://netwchao.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://netwchao.github.io/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/▾ images/logo.png should become
▾ &amp;lt;root&amp;gt;/▾ static/▾ images/logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
  </channel>
</rss>